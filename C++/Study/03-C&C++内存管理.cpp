#include <iostream>

/*
	C/C++内存管理
		1.C/C++内存分布
		2.C语言中动态内存管理方式
		3.C++中动态内存管理
		4.operator new与operator delete函数
		5.new和delete的实现原理
		6.定位new表达式(placement-new)
		7.常见面试题
*/

/**
	C/C++内存分布：C/C++程序在虚拟进程地址空间中的内存分布，即C/C++程序的内存布局(内存区域划分)。(仅介绍主要内存区域)(以下规则可能在不同操作系统或编译器(链接器)中有所不同)
		1.栈区：即"Stack"内存区域，又被称为堆栈。(注意与数据结构的栈进行区分)
			a.栈区以后进先出(LIFO)的方式添加或删除数据，通常位于内存的较高部分(地址)，在标准的计算机架构中，栈区的地址从高到低增长。
			b.栈区由编译器自动分配释放，并且用于存放或构造非静态局部对象(具有自动存储期的对象)、调用函数时的参数和其他与函数相关的信息等数据。
			c.栈区分配内存的方式是发生在连续的内存块上的，访问数据速度快(相对于堆而言)。
			d.栈区的存储空间较小(相对于堆而言)，若栈区内存不足，会导致程序崩溃(栈溢出)。
		2.堆区：即"Heap"内存区域。(注意与数据结构的堆进行区分)
			a.堆区通常被用于存放程序运行时动态分配的内存，是供程序员分配和释放的内存空间，通常位于栈区的下方(即相对于栈区较低的部分(地址))，但堆区的地址是从低到高增长的。
			b.堆区分配的内存的方式是以随机顺序分配在内存块上的，并且堆上的数据也可能存储为不连续的内存块(已使用的内存块位于未使用的内存块之间)，导致存储在内存块的数据变得碎片化，访问数据速度慢(相对于栈而言)。
			c.堆区的存储空间较大(相对于栈而言)，若堆区内存不足，会导致分配失败。
			d.C/C++中堆区的数据需要程序员以编程的方式进行手动分配和释放，若分配后不释放，则会导致内存泄漏(保持运行的情况下)，直到程序结束才会被操作系统回收。
 		3.未初始化的数据段：即"Block Started by Symbol"段(简称为"BSS"段)。
			a."BSS"段通常存放着未初始化的静态变量(包括全局和局部)和全局变量，并且通常也存放着初始化为零的全局变量和静态变量(指针类型则为空指针)。(对于内置类型而言)
			b.在程序开始执行之前(进入主函数前)，该段中的数据将被初始化为零(指针类型则为空指针)，包含所有初始化为零或在源代码中没有显式初始化的全局变量和静态变量。
			c.存放在"BSS"段中的数据不会被写入到目标文件中，但会记录未初始化数据在程序装载时所需空间的大小。
			d."BSS"段存在于堆区的下方(相对于堆区较低的部分(地址))。
			e.通常情况下，"BSS"段并不存储以"const"限定符修饰的变量，除非是C语言中未初始化(不包含以隐式或显式的零初始化)的全局常变量(注意不是静态变量)。
				a'.在C语言中，被"const"关键词修饰的变量称之为常变量，实际上是变量而非常量，其只是在语法层面上限制不能被修改，并且在定义时可以不显式初始化。
				b'.在C语言中，若全局的常变量(非静态变量)没有被初始化，则其会被存储在"BSS"段中，但当其被初识化时(包括初始化为零)，则会被存储在已初始化数据段中。
				c'.在C++中，被"const"关键词修饰的变量必须在定义时初始化，所以其通常不会在"BSS"段中存储，即使它们被隐式或显式初始化为零。
		4.已初始化的数据段：即"Initialized Data Segment"段，通常简称为数据段(即"Data Segment"段或"Data"段)。
			a.已初始化的数据段存放着已被初始化的静态变量和全局变量(对于内置类型而言)。
			b.此段在内存区域所占的空间大小将由源代码中的初始化数据的大小决定，并且在运行时不会再改变。
			c.数据段是只读或可读写的，因为变量的值可以在运行时更改，所以该段又可以分为初始化只读区和初始化读写区。
				a'.初始化只读区存放的是由"const"限定符修饰的：静态变量、全局常变量，并且还存放着只读字符串常量等数据。
				b'.初始化读写区存放的是非"const"限定符修饰的：静态变量、全局变量。
			d.该段存在于未初始化的数据段的下方(相对于未初始化的数据段较低的部分(地址))。
		5.代码段：即"Text"段，又被称为文本段。
			a.代码段存放着程序的机器指令，即可执行的指令，即要执行的程序步骤的机器语言表示，其中包括了函数体的二进制代码等。
			b.代码段的大小通常是固定的，并且不可写入，以避免其他内存区域溢出等编程错误覆盖的风险。
*/

////C/C++内存分布示例：以下为包含多种情况测试代码，请结合"size"命令、"objdump"命令以及编译器编译选项(链接选项)分步测试观测内存分布的情况。(不同操作系统或编译器(链接器)的结果可能不同)
////以零初始化的全局静态常变量：存储于已初始化的数据段中的初始化只读区中。
//const static int csg1 = 0;
//const static int csg2 = 0;
//
////已初始化的全局静态常变量：存储于已初始化的数据段中的初始化只读区中。
//const static int csg3 = 100;
//const static int csg4 = 100;
//
//////未初始化的全局静态常变量(C语言中允许，C++中不允许)：存储于已初始化的数据段中的初始化只读区中(仅对于C语言)。
////const static int csg5;
////const static int csg6;
//
////以零初始化的全局常变量：存储于已初始化的数据段中的初始化只读区中。
//const int cg1 = 0;
//const int cg2 = 0;
//
////已初始化的全局常变量：存储于已初始化的数据段中的初始化只读区中。
//const int cg3 = 100;
//const int cg4 = 100;
//
//////未初始化的全局常变量(C中允许，C++中不允许)：存储于未初始化的数据段中(仅对于C语言)。
////const int cg5;
////const int cg6;
//
////以零初始化的全局静态变量：存储于未初始化的数据段中。
//static int sg1 = 0;
//static int sg2 = 0;
//
////已初始化的全局静态变量：存储于已初始化的数据段中的初始化读写区中。
//static int sg3 = 100;
//static int sg4 = 100;
//
////未初始化的全局静态变量：存储于未初始化的数据段中。
//static int sg5;
//static int sg6;
//
////以零初始化的全局变量：存储于未初始化的数据段中。
//int g1 = 0;
//int g2 = 0;
//
////已初始化的全局变量：存储于已初始化的数据段中的初始化读写区中。
//int g3 = 100;
//int g4 = 100;
//
////未初始化的全局变量：存储于未初始化的数据段中。
//int g5;
//int g6;
//
////字符串常量：存储于已初始化的数据段中的初始化只读区中。
//const char* cstrg1 = "hello world";//此处的指针为全局变量，存储于已初始化的数据段中的初始化读写区中。
//char* const strcg2 = "hello world";//此处的指针为全局常变量，存储于已初始化的数据段中的初始化只读区中。
//
//int main()
//{
//	//以零初始化的局部静态常变量：存储于已初始化的数据段中的初始化只读区中。
//	const static int csp1 = 0;
//	const static int csp2 = 0;
//
//	//已初始化的局部静态常变量：存储于已初始化的数据段中的初始化只读区中。
//	const static int csp3 = 100;
//	const static int csp4 = 100;
//
//	////未初始化的的局部静态常变量(C中允许，C++中不允许)：存储于已初始化的数据段中的初始化只读区中(仅对于C语言)。
//	//const static int csp5;
//	//const static int csp6;
//
//	//以零初始化的局部常变量：存储于栈中。
//	const int cp1 = 0;
//	const int cp2 = 0;
//
//	//已初始化的局部常变量：存储于栈中。
//	const int cp3 = 100;
//	const int cp4 = 100;
//
//	////未初始化的局部常变量(C中允许，C++中不允许)：存储于栈中(仅对于C语言)。
//	//const int cp5;
//	//const int cp6;
//
//	//以零初始化的局部静态变量：存储于未初始化的数据段中。
//	static int sp1 = 0;
//	static int sp2 = 0;
//
//	//已初始化的局部静态变量：存储于已初始化的数据段中的初始化读写区中。
//	static int sp3 = 100;
//	static int sp4 = 100;
//
//	//未初始化的局部静态变量：存储于未初始化的数据段中。
//	static int sp5;
//	static int sp6;
//
//	//以零初始化的局部变量：存储于栈中。
//	int p1 = 0;
//	int p2 = 0;
//
//	//已初始化的局部变量：存储于栈中。
//	int p3 = 100;
//	int p4 = 100;
//
//	//未初始化的局部变量：存储于栈中。
//	int p5;
//	int p6;
//
//	//字符串常量：存储于已初始化的数据段中的初始化只读区中。
//	const char* cstrp1 = "hello world";//此处的指针为局部变量，存储于栈中。
//	char* const strcp2 = "hello world";//此处的指针为局部常变量，存储于栈中。
//
//	return 0;
//}