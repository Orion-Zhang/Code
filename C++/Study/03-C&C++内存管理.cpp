#include <iostream>

/*
	C&C++内存管理
		1.C/C++内存分布
		2.C语言中动态内存管理方式
		3.C++中动态内存管理
		4.operator new与operator delete函数
		5.new和delete的实现原理
		6.定位new表达式(placement-new)
		7.常见面试题
*/

/**
	C/C++内存分布：C/C++程序在虚拟进程地址空间中的内存分布，即C/C++程序的内存布局(内存区域划分)。(仅介绍主要内存区域)
		1.栈区：即"Stack"内存区域，又被称为堆栈。(注意与数据结构的栈进行区分)
			a.栈区以后进先出(LIFO)的方式添加或删除数据，通常位于内存的较高部分(地址)，在标准的计算机架构中，栈区的地址从高到低增长。
			b.栈区由编译器自动分配释放，并且用于存放或构造非静态局部对象(具有自动存储期的对象)、调用函数时的参数和其他与函数相关的信息等数据。
			c.栈区分配内存的方式是发生在连续的内存块上的，访问数据速度快(相对于堆而言)。
			d.栈区的存储空间较小(相对于堆而言)，若栈区内存不足，会导致程序崩溃(栈溢出)。
		2.堆区：即"Heap"内存区域。(注意与数据结构的堆进行区分)
			a.堆区通常被用于存放程序运行时动态分配的内存，是供程序员分配和释放的内存空间，通常位于栈区的下方(即相对于栈区较低的部分(地址))，但堆区的地址是从低到高增长的。
			b.堆区分配的内存的方式是以随机顺序分配在内存块上的，并且堆上的数据也可能存储为不连续的内存块(已使用的内存块位于未使用的内存块之间)，导致存储在内存块的数据变得碎片化，访问数据速度慢(相对于栈而言)。
			c.堆区的存储空间较大(相对于栈而言)，若堆区内存不足，会导致分配失败。
			d.C/C++中堆区的数据需要程序员以编程的方式进行手动分配和释放，若分配后不释放，则会导致内存泄漏(保持运行的情况下)，直到程序结束才会被操作系统回收。
*/